swagger: '2.0'
info:
  version: '1.0.0'
  title: 'API Documentation'
basePath: '/'

schemes:
  - 'http'
  - 'https'

consumes:
  - 'application/json'
produces:
  - 'application/json'
tags:
  - name: Employees
  - name: Customers
  - name: Users

paths:
  /employee:
    get:
      tags:
        - Employees
      summary: Get all employees
      security:
        - Bearer: []
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Employee'
        401:
          description: Unauthorized

    post:
      tags:
        - Employees
      summary: Create a new employee
      security:
        - Bearer: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Employee'
      responses:
        201:
          description: Employee created
        400:
          description: Bad request
        401:
          description: Unauthorized

  /employee/{id}:
    get:
      tags:
        - Employees
      summary: Get an employee by id
      security:
        - Bearer: []
      parameters:
        - in: path
          name: id
          required: true
          type: integer
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Employee'
        401:
          description: Unauthorized

    put:
      tags:
        - Employees
      summary: Update an employee by id
      security:
        - Bearer: []
      parameters:
        - in: path
          name: id
          required: true
          type: integer
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Employee'
      responses:
        200:
          description: Employee updated
        400:
          description: Bad request
        401:
          description: Unauthorized

    delete:
      tags:
        - Employees
      summary: Delete an employee by id
      security:
        - Bearer: []
      parameters:
        - in: path
          name: id
          required: true
          type: integer
      responses:
        204:
          description: Employee deleted
        401:
          description: Unauthorized
  /customer:
    get:
      tags:
        - Customers
      summary: Get all customers
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Customer'
    post:
      tags:
        - Customers
      summary: Create a new customer
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Customer'
      responses:
        201:
          description: Customer created
        400:
          description: Bad request
  /customer/{id}:
    get:
      tags:
        - Customers
      summary: Get a customer by id
      parameters:
        - in: path
          name: id
          required: true
          type: integer
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Customer'
    put:
      tags:
        - Customers
      summary: Update a customer by id
      parameters:
        - in: path
          name: id
          required: true
          type: integer
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Customer'
      responses:
        200:
          description: Customer updated
        400:
          description: Bad request
    delete:
      tags:
        - Customers
      summary: Delete a customer by id
      parameters:
        - in: path
          name: id
          required: true
          type: integer
      responses:
        204:
          description: Customer deleted
  /user/register:
    post:
      tags:
        - Users
      summary: Register a new user
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UserRegister'
      responses:
        201:
          description: User registered
        400:
          description: Bad request

  /user/login:
    post:
      tags:
        - Users
      summary: Log in as a user
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UserLogin'
      responses:
        200:
          description: User logged in
        401:
          description: Unauthorized
        400:
          description: Bad request
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: 'Bearer {access_token}'

definitions:
  Employee:
    type: object
    properties:
      employeeNumber:
        type: integer
      firstName:
        type: string
      extension:
        type: string
      email:
        type: string
      officeCode:
        type: string
      reportsTo:
        type: integer
        nullable: true
      jobTitle:
        type: string
        enum: [president, manager, leader]
    required:
      - firstName
      - extension
      - email
      - officeCode
      - jobTitle
  Customer:
    type: object
    properties:
      customerNumber:
        type: integer
      customerName:
        type: string
      contactLastName:
        type: string
      contactFirstName:
        type: string
      phone:
        type: string
      addressLine1:
        type: string
      addressLine2:
        type: string
        city:
        type: string
      state:
        type: string
      postalCode:
        type: string
      country:
        type: string
      salesRepEmployeeNumber:
        type: integer
      creditLimit:
        type: number
        format: float
    required:
      - customerName
      - contactLastName
      - contactFirstName
      - phone
      - addressLine1
      - city
      - country
  UserRegister:
    type: object
    properties:
      userName:
        type: string
        minLength: 3
        maxLength: 20
      password:
        type: string
        minLength: 6
        maxLength: 100
        pattern: '^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{6,}$'
      employeeNumber:
        type: integer
        minimum: 1
    required:
      - userName
      - password
      - employeeNumber

  UserLogin:
    type: object
    properties:
      userName:
        type: string
        minLength: 3
        maxLength: 20
      password:
        type: string
        minLength: 6
        maxLength: 100
    required:
      - userName
      - password